{"version":3,"sources":["../node_modules/3id-blockchain-utils/lib/blockchains sync","idx.ts","state.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","CERAMIC_URL","threeID","ThreeIdConnect","web3modal","Web3Modal","network","cacheProvider","a","connect","ethereumProvider","send","result","EthereumAuthProvider","ceramic","Ceramic","setDIDProvider","getDidProvider","idx","IDX","aliases","definitions","get","notesList","notes","reducer","state","action","type","nav","auth","status","length","reduce","acc","item","title","draftStatus","docID","doc","noteState","useApp","useReducer","dispatch","authenticate","useCallback","getIDX","then","init","err","console","warn","openDraft","deleteDraft","saveDraft","text","Promise","all","createDocument","content","date","Date","toISOString","metadata","controllers","schema","schemas","Note","set","toUrl","toString","catch","log","openNote","loadDocument","saveNote","change","toUTCString","drawerWidth","useStyles","makeStyles","theme","createStyles","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","flexGrow","padding","noteSaveButton","marginTop","noteTextarea","border","fontSize","typography","pxToRem","NotesList","draft","icon","ListItem","button","onClick","selected","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","Object","entries","map","note","isSelected","List","Divider","AuthenticateScreen","Typography","Button","color","disabled","variant","DraftScreen","save","classes","useState","open","setOpen","textRef","useRef","titleRef","handleClose","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","inputRef","fullWidth","DialogActions","current","value","Paper","elevation","TextareaAutosize","className","placeholder","ref","rowsMin","rowsMax","NoteScreen","defaultValue","App","screen","app","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","CssBaseline","AppBar","position","Toolbar","noWrap","href","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc1b702f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 516;","import Ceramic from '@ceramicnetwork/http-client'\nimport { IDX } from '@ceramicstudio/idx'\nimport { EthereumAuthProvider, ThreeIdConnect } from '3id-connect'\nimport Web3Modal from 'web3modal'\n\nimport { definitions } from './config.json'\n\nconst CERAMIC_URL = 'https://ceramic-dev.3boxlabs.com'\n\n// @ts-ignore argument\nconst threeID = new ThreeIdConnect()\nconst web3modal = new Web3Modal({ network: 'mainnet', cacheProvider: true })\n\nexport type NoteItem = {\n  id: string\n  title: string\n}\n\nexport type NotesList = { notes: Array<NoteItem> }\n\nexport type IDXInit = NotesList & {\n  ceramic: Ceramic\n  idx: IDX\n}\n\nexport async function getIDX(): Promise<IDXInit> {\n  // Connect an Ethereum provider\n  const ethereumProvider = await web3modal.connect()\n  const { result } = await ethereumProvider.send('eth_requestAccounts')\n\n  // Authenticate using the Ethereum provider in 3ID Connect\n  await threeID.connect(new EthereumAuthProvider(ethereumProvider, result[0]))\n\n  // Create the Ceramic instance and inject provider\n  const ceramic = new Ceramic(CERAMIC_URL)\n  await ceramic.setDIDProvider(threeID.getDidProvider())\n\n  // Create the IDX instance with the definitions aliases from the config\n  const idx = new IDX({ ceramic, aliases: definitions })\n\n  // Load the existing notes\n  const notesList = await idx.get<{ notes: Array<NoteItem> }>('notes')\n  return { ceramic, idx, notes: notesList?.notes ?? [] }\n}\n","import type { Doctype } from '@ceramicnetwork/common'\nimport type Ceramic from '@ceramicnetwork/http-client'\nimport type { IDX } from '@ceramicstudio/idx'\nimport { useCallback, useReducer } from 'react'\n\nimport { schemas } from './config.json'\nimport { getIDX } from './idx'\nimport type { IDXInit, NotesList } from './idx'\n\ntype AuthStatus = 'pending' | 'loading' | 'failed'\nexport type DraftStatus = 'unsaved' | 'saving' | 'failed' | 'saved'\ntype NoteLoadingStatus = 'init' | 'loading' | 'loading failed'\ntype NoteSavingStatus = 'loaded' | 'saving' | 'saving failed' | 'saved'\n\ntype UnauthenticatedState = { status: AuthStatus }\ntype AuthenticatedState = { status: 'done'; ceramic: Ceramic; idx: IDX }\nexport type AuthState = UnauthenticatedState | AuthenticatedState\n\ntype NavDefaultState = { type: 'default' }\ntype NavDraftState = { type: 'draft' }\ntype NavNoteState = { type: 'note'; docID: string }\n\nexport type IndexLoadedNote = { status: NoteLoadingStatus; title: string }\nexport type StoredNote = {\n  status: NoteSavingStatus\n  title: string\n  doc: Doctype\n}\n\ntype Store = {\n  draftStatus: DraftStatus\n  notes: Record<string, IndexLoadedNote | StoredNote>\n}\ntype DefaultState = {\n  auth: AuthState\n  nav: NavDefaultState\n}\ntype NoteState = {\n  auth: AuthenticatedState\n  nav: NavDraftState | NavNoteState\n}\nexport type State = Store & (DefaultState | NoteState)\n\ntype AuthAction = { type: 'auth'; status: AuthStatus }\ntype AuthSuccessAction = { type: 'auth success' } & IDXInit\ntype NavResetAction = { type: 'nav reset' }\ntype NavDraftAction = { type: 'nav draft' }\ntype NavNoteAction = { type: 'nav note'; docID: string }\ntype DraftDeleteAction = { type: 'draft delete' }\ntype DraftStatusAction = { type: 'draft status'; status: 'saving' | 'failed' }\ntype DraftSavedAction = {\n  type: 'draft saved'\n  title: string\n  docID: string\n  doc: Doctype\n}\ntype NoteLoadedAction = { type: 'note loaded'; docID: string; doc: Doctype }\ntype NoteLoadingStatusAction = {\n  type: 'note loading status'\n  docID: string\n  status: NoteLoadingStatus\n}\ntype NoteSavingStatusAction = {\n  type: 'note saving status'\n  docID: string\n  status: NoteSavingStatus\n}\ntype Action =\n  | AuthAction\n  | AuthSuccessAction\n  | NavResetAction\n  | NavDraftAction\n  | NavNoteAction\n  | DraftDeleteAction\n  | DraftStatusAction\n  | DraftSavedAction\n  | NoteLoadedAction\n  | NoteLoadingStatusAction\n  | NoteSavingStatusAction\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'auth':\n      return {\n        ...state,\n        nav: { type: 'default' },\n        auth: { status: action.status },\n      }\n    case 'auth success': {\n      const auth = {\n        status: 'done',\n        ceramic: action.ceramic,\n        idx: action.idx,\n      } as AuthenticatedState\n      return action.notes.length\n        ? {\n            ...state,\n            auth,\n            notes: action.notes.reduce((acc, item) => {\n              acc[item.id] = { status: 'init', title: item.title }\n              return acc\n            }, {} as Record<string, IndexLoadedNote>),\n          }\n        : {\n            auth,\n            draftStatus: 'unsaved',\n            nav: { type: 'draft' },\n            notes: {},\n          }\n    }\n    case 'nav reset':\n      return { ...state, nav: { type: 'default' } }\n    case 'nav draft':\n      return {\n        ...state,\n        auth: state.auth as AuthenticatedState,\n        nav: { type: 'draft' },\n      }\n    case 'draft status':\n      return {\n        ...state,\n        auth: state.auth as AuthenticatedState,\n        draftStatus: action.status,\n      }\n    case 'draft delete':\n      return {\n        ...state,\n        draftStatus: 'unsaved',\n        nav: { type: 'default' },\n      }\n    case 'draft saved': {\n      return {\n        auth: state.auth as AuthenticatedState,\n        draftStatus: 'unsaved',\n        nav: { type: 'note', docID: action.docID },\n        notes: {\n          ...state.notes,\n          [action.docID]: {\n            status: 'saved',\n            title: action.title,\n            doc: action.doc,\n          },\n        },\n      }\n    }\n    case 'nav note':\n      return {\n        ...state,\n        auth: state.auth as AuthenticatedState,\n        nav: {\n          type: 'note',\n          docID: action.docID,\n        },\n      }\n    case 'note loaded': {\n      const id = (state.nav as NavNoteState).docID\n      const noteState = state.notes[id]\n      return {\n        ...state,\n        auth: state.auth as AuthenticatedState,\n        notes: {\n          ...state.notes,\n          [id]: {\n            status: 'loaded',\n            title: noteState.title,\n            doc: action.doc,\n          },\n        },\n      }\n    }\n    case 'note loading status': {\n      const id = (state.nav as NavNoteState).docID\n      const noteState = state.notes[id] as IndexLoadedNote\n      return {\n        ...state,\n        auth: state.auth as AuthenticatedState,\n        notes: {\n          ...state.notes,\n          [id]: { ...noteState, status: action.status },\n        },\n      }\n    }\n    case 'note saving status': {\n      const id = (state.nav as NavNoteState).docID\n      const noteState = state.notes[id] as StoredNote\n      return {\n        ...state,\n        auth: state.auth as AuthenticatedState,\n        notes: {\n          ...state.notes,\n          [id]: { ...noteState, status: action.status },\n        },\n      }\n    }\n  }\n}\n\nexport function useApp() {\n  const [state, dispatch] = useReducer(reducer, {\n    auth: { status: 'pending' },\n    draftStatus: 'unsaved',\n    nav: { type: 'default' },\n    notes: {},\n  })\n\n  const authenticate = useCallback(() => {\n    dispatch({ type: 'auth', status: 'loading' })\n    getIDX().then(\n      (init) => {\n        dispatch({ type: 'auth success', ...init })\n      },\n      (err) => {\n        console.warn('authenticate call failed', err)\n        dispatch({ type: 'auth', status: 'failed' })\n      },\n    )\n  }, [])\n\n  const openDraft = useCallback(() => {\n    dispatch({ type: 'nav draft' })\n  }, [])\n\n  const deleteDraft = useCallback(() => {\n    dispatch({ type: 'draft delete' })\n  }, [])\n\n  const saveDraft = useCallback(\n    (title: string, text: string) => {\n      dispatch({ type: 'draft status', status: 'saving' })\n      const { ceramic, idx } = state.auth as AuthenticatedState\n      Promise.all([\n        ceramic.createDocument('tile', {\n          content: { date: new Date().toISOString(), text },\n          metadata: { controllers: [idx.id], schema: schemas.Note },\n        }),\n        idx.get<NotesList>('notes'),\n      ])\n        .then(([doc, notesList]) => {\n          const notes = notesList?.notes ?? []\n          return idx\n            .set('notes', {\n              notes: [{ id: doc.id.toUrl(), title }, ...notes],\n            })\n            .then(() => {\n              const docID = doc.id.toString()\n              dispatch({ type: 'draft saved', docID, title, doc })\n            })\n        })\n        .catch((err) => {\n          console.log('failed to save draft', err)\n          dispatch({ type: 'draft status', status: 'failed' })\n        })\n    },\n    [state.auth],\n  )\n\n  const openNote = useCallback(\n    (docID: string) => {\n      dispatch({ type: 'nav note', docID })\n\n      if (state.notes[docID] == null || state.notes[docID].status === 'init') {\n        const { ceramic } = state.auth as AuthenticatedState\n        ceramic.loadDocument(docID).then(\n          (doc) => {\n            dispatch({ type: 'note loaded', docID, doc })\n          },\n          () => {\n            dispatch({\n              type: 'note loading status',\n              docID,\n              status: 'loading failed',\n            })\n          },\n        )\n      }\n    },\n    [state.auth, state.notes],\n  )\n\n  const saveNote = useCallback((doc: Doctype, text: string) => {\n    const docID = doc.id.toString()\n    dispatch({ type: 'note saving status', docID, status: 'saving' })\n    doc.change({ content: { date: new Date().toUTCString(), text } }).then(\n      () => {\n        dispatch({ type: 'note saving status', docID, status: 'saved' })\n      },\n      () => {\n        dispatch({ type: 'note saving status', docID, status: 'saving failed' })\n      },\n    )\n  }, [])\n\n  return {\n    authenticate,\n    deleteDraft,\n    openDraft,\n    openNote,\n    saveDraft,\n    saveNote,\n    state,\n  }\n}\n","import type { Doctype } from '@ceramicnetwork/common'\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from '@material-ui/core/Drawer'\nimport Hidden from '@material-ui/core/Hidden'\nimport IconButton from '@material-ui/core/IconButton'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Paper from '@material-ui/core/Paper'\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\nimport TextField from '@material-ui/core/TextField'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport {\n  makeStyles,\n  useTheme,\n  Theme,\n  createStyles,\n} from '@material-ui/core/styles'\nimport DownloadIcon from '@material-ui/icons/CloudDownload'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport ErrorIcon from '@material-ui/icons/ErrorOutline'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport NoteIcon from '@material-ui/icons/Note'\nimport NoteAddIcon from '@material-ui/icons/NoteAdd'\nimport UploadIcon from '@material-ui/icons/CloudUpload'\nimport React, { useRef, useState } from 'react'\n\nimport { useApp } from './state'\nimport type {\n  AuthState,\n  DraftStatus,\n  IndexLoadedNote,\n  State,\n  StoredNote,\n} from './state'\n\nconst drawerWidth = 300\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    noteSaveButton: {\n      marginTop: theme.spacing(2),\n    },\n    noteTextarea: {\n      border: 0,\n      fontSize: theme.typography.pxToRem(18),\n      padding: theme.spacing(2),\n      width: '100%',\n    },\n  }),\n)\n\ntype NotesListProps = {\n  authenticate: () => void\n  deleteDraft: () => void\n  openDraft: () => void\n  openNote: (docID: string) => void\n  state: State\n}\n\nfunction NotesList({\n  authenticate,\n  deleteDraft,\n  openDraft,\n  openNote,\n  state,\n}: NotesListProps) {\n  let draft\n  if (state.nav.type === 'draft') {\n    let icon\n    switch (state.draftStatus) {\n      case 'failed':\n        icon = <ErrorIcon />\n        break\n      case 'saving':\n        icon = <UploadIcon />\n        break\n      default:\n        icon = <EditIcon />\n    }\n    draft = (\n      <ListItem button onClick={() => openDraft()} selected>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary=\"Draft note\" />\n        <ListItemSecondaryAction>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => deleteDraft()}>\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n    )\n  } else if (state.auth.status === 'done') {\n    draft = (\n      <ListItem button onClick={() => openDraft()}>\n        <ListItemIcon>\n          <NoteAddIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"New note\" />\n      </ListItem>\n    )\n  } else {\n    draft = (\n      <ListItem button onClick={() => authenticate()}>\n        <ListItemIcon>\n          <NoteAddIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Authenticate to create note\" />\n      </ListItem>\n    )\n  }\n\n  const notes = Object.entries(state.notes).map(([docID, note]) => {\n    const isSelected = state.nav.type === 'note' && state.nav.docID === docID\n\n    let icon\n    switch (note.status) {\n      case 'loading failed':\n      case 'saving failed':\n        icon = <ErrorIcon />\n        break\n      case 'loading':\n        icon = <DownloadIcon />\n        break\n      case 'saving':\n        icon = <UploadIcon />\n        break\n      default:\n        icon = isSelected ? <EditIcon /> : <NoteIcon />\n    }\n\n    return (\n      <ListItem\n        button\n        key={docID}\n        onClick={() => openNote(docID)}\n        selected={isSelected}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={note.title} />\n      </ListItem>\n    )\n  })\n\n  return (\n    <>\n      <List>{draft}</List>\n      <Divider />\n      <List>{notes}</List>\n    </>\n  )\n}\n\ntype AuthenticateProps = {\n  authenticate: () => void\n  state: AuthState\n}\n\nfunction AuthenticateScreen({ authenticate, state }: AuthenticateProps) {\n  return state.status === 'done' ? (\n    <Typography>Authenticated with ID {state.idx.id}</Typography>\n  ) : (\n    <>\n      <Typography>\n        You need to authenticate to load your existing notes and create new\n        ones.\n      </Typography>\n      <Button\n        color=\"primary\"\n        disabled={state.status === 'loading'}\n        onClick={authenticate}\n        variant=\"contained\">\n        Authenticate\n      </Button>\n    </>\n  )\n}\n\ntype DraftScreenProps = {\n  save: (title: string, text: string) => void\n  status: DraftStatus\n}\n\nfunction DraftScreen({ save, status }: DraftScreenProps) {\n  const classes = useStyles()\n  const [open, setOpen] = useState(false)\n  const textRef = useRef<HTMLTextAreaElement>(null)\n  const titleRef = useRef<HTMLInputElement>(null)\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleSave = () => {\n    const text = textRef.current?.value\n    const title = titleRef.current?.value\n    if (text && title) {\n      save(title, text)\n    }\n    setOpen(false)\n  }\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Save note</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"title\"\n            label=\"Note title\"\n            inputRef={titleRef}\n            type=\"text\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSave} color=\"primary\" variant=\"outlined\">\n            Save note\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Paper elevation={5}>\n        <TextareaAutosize\n          className={classes.noteTextarea}\n          disabled={status === 'saving'}\n          placeholder=\"Note contents...\"\n          ref={textRef}\n          rowsMin={10}\n          rowsMax={20}\n        />\n      </Paper>\n      <Button\n        className={classes.noteSaveButton}\n        color=\"primary\"\n        disabled={status === 'saving'}\n        onClick={handleOpen}\n        variant=\"contained\">\n        Save\n      </Button>\n    </>\n  )\n}\n\ntype NoteScreenProps = {\n  note: IndexLoadedNote | StoredNote\n  save: (doc: Doctype, text: string) => void\n}\n\nfunction NoteScreen({ note, save }: NoteScreenProps) {\n  const classes = useStyles()\n  const textRef = useRef<HTMLTextAreaElement>(null)\n\n  if (note.status === 'loading failed') {\n    return <Typography>Failed to load note!</Typography>\n  }\n\n  if (note.status === 'init' || note.status === 'loading') {\n    return <Typography>Loading note...</Typography>\n  }\n\n  const doc = (note as StoredNote).doc\n  return (\n    <>\n      <Paper elevation={5}>\n        <TextareaAutosize\n          className={classes.noteTextarea}\n          disabled={note.status === 'saving'}\n          defaultValue={doc.content.text}\n          placeholder=\"Note contents...\"\n          ref={textRef}\n          rowsMin={10}\n          rowsMax={20}\n        />\n      </Paper>\n      <Button\n        className={classes.noteSaveButton}\n        color=\"primary\"\n        disabled={note.status === 'saving'}\n        onClick={() => save(doc, textRef.current?.value ?? '')}\n        variant=\"contained\">\n        Save\n      </Button>\n    </>\n  )\n}\n\nexport default function App() {\n  const app = useApp()\n  const classes = useStyles()\n  const theme = useTheme()\n  const [mobileOpen, setMobileOpen] = useState(false)\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen)\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <NotesList\n        authenticate={app.authenticate}\n        deleteDraft={app.deleteDraft}\n        openDraft={app.openDraft}\n        openNote={app.openNote}\n        state={app.state}\n      />\n    </div>\n  )\n\n  let screen\n  switch (app.state.nav.type) {\n    case 'draft':\n      screen = (\n        <DraftScreen save={app.saveDraft} status={app.state.draftStatus} />\n      )\n      break\n    case 'note':\n      screen = (\n        <NoteScreen\n          key={app.state.nav.docID}\n          note={app.state.notes[app.state.nav.docID]}\n          save={app.saveNote}\n        />\n      )\n      break\n    default:\n      screen = (\n        <AuthenticateScreen\n          authenticate={app.authenticate}\n          state={app.state.auth}\n        />\n      )\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}>\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} noWrap variant=\"h6\">\n            IDX demo notes app\n          </Typography>\n          <Button color=\"inherit\" href=\"https://idx.xyz\" variant=\"outlined\">\n            IDX\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"notes\">\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{ paper: classes.drawerPaper }}\n            ModalProps={{ keepMounted: true }}>\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{ paper: classes.drawerPaper }}\n            variant=\"permanent\"\n            open>\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {screen}\n      </main>\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}